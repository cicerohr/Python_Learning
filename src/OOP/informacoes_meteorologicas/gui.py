"""
This file was generated by the Tkinter.

@app: Tkinter Designer
@author: Parth Jadhav
@license: BSD 3-Clause "New" or "Revised" License
@link: https://github.com/ParthJadhav/Tkinter-Designer
@modified by: Cícero
"""

from pathlib import Path
from tkinter import Tk, Canvas, Entry, Button, PhotoImage, messagebox

from InformacoesMeteorologicas import InformacoesMeteorologicas
from loguru_conf import logger

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path('assets')


def relative_to_assets(path: str) -> Path:
    """Function to get the path of the image relative to the assets' folder.

    :param path: name of the image
    :type path: str
    :return: path of the image relative to the assets' folder.
    :rtype: Path
    """
    return ASSETS_PATH / Path(path)


def clear_text_boxes() -> None:
    """Clear the text boxes.

    :rtype: None
    """
    entry_city.delete(0, 'end')


def enter_pressed(event) -> None:
    """Function to listening to <Return> key."""
    show_info_meteorologicas(entry_city.get())


def create_images_canvas() -> None:
    """Function to create the images for the canvas with the info tag.

    The images are created with the position of the canvas.

    image[0] -> 'nome_da_imagem'
    image[1] -> posição_x
    image[2] -> posição_y

    :rtype: None
    """
    images = [
        ('minima.png', 29.0, 368.0),
        ('maxima.png', 498.0, 368.0),
        ('nascente.png', 29.0, 596.0),
        ('poente.png', 498.0, 596.0),
        ('rosa_ventos.png', 265.0, 593.0),
    ]
    for image in images:
        var_name = f'image_{image[0]}'
        var_name = var_name.replace('.png', '')
        globals()[var_name] = PhotoImage(file=relative_to_assets(image[0]))
        canvas.create_image(
            image[1], image[2], image=globals()[var_name], tag='info'
        )


def clear_canvas() -> None:
    """Function to clear the canvas with the tags='info'.

    :rtype: None
    """
    canvas.delete('info')


window = Tk()

# set center screen window with following coordination
window_width = 530
window_height = 700
left_position = (window.winfo_screenwidth() - window_width) // 2
top_position = (window.winfo_screenheight() - window_height) // 2
window.geometry(
    f'{window_width}x{window_height}+{left_position}+{top_position}'
)

window.configure(bg='#69696A')
window.title('Informações Meteorológicas')
window.iconbitmap(relative_to_assets('icon.ico'))

canvas = Canvas(
    window,
    bg='#69696A',
    width=window_width,
    height=window_height,
    bd=0,
    highlightthickness=0,
    relief='ridge',
)

canvas.place(x=0, y=0)

canvas.create_text(
    161.0,
    27.0,
    anchor='nw',
    text='Clima Atual',
    fill='#E3E3E3',
    font=('RobotoRoman Bold', 40 * -1),
)

entry_image_1 = PhotoImage(file=relative_to_assets('entry_1.png'))
entry_bg_1 = canvas.create_image(265.5, 111.0, image=entry_image_1)
entry_city = Entry(
    bd=0,
    bg='#D1D1D1',
    highlightthickness=0,
    font=('Roboto', 20),
    justify='center',
)
entry_city.place(x=63.0, y=88.0, width=405.0, height=44.0)
entry_city.focus_set()
entry_city.bind('<Return>', enter_pressed)

button_image_1 = PhotoImage(file=relative_to_assets('button_1.png'))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_info_meteorologicas(entry_city.get()),
    relief='flat',
)
button_1.place(x=170.0, y=148.0, width=191.0, height=49.0)
button_1.bind('<Return>', enter_pressed)


def show_info_meteorologicas(nome_cidade: str) -> None:
    """Function to get the information meteorologicas.

    :param nome_cidade: city name to get the information.
    :type nome_cidade: str
    :rtype: None
    """
    informacoes = InformacoesMeteorologicas(nome_cidade)
    info = informacoes.__dict__()
    # print(info)
    if info == -1:
        logger.error(f'Cidade não encontrada. "{nome_cidade}"')
        messagebox.showerror(
            'Erro',
            f'Não foi possível encontrar a cidade informada. '
            f'"{nome_cidade}"',
        )
        clear_text_boxes()
        clear_canvas()
        return

    clear_text_boxes()
    clear_canvas()
    create_images_canvas()

    # Solution for problem with PhotoImage inside a function.
    icone = PhotoImage(file=relative_to_assets(f'{info["icone"]}@2x.png'))
    w = Canvas(window)
    w.icone = icone
    canvas.create_image(265.0, 344.0, image=w.icone, tags='info')

    canvas.create_text(
        265.0,
        228.0,
        anchor='center',
        text=f'{info["nome"]}/{info["pais"]} | {info["data_hora"]}',
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 25 * -1),
        tags=('info', 'h2'),
    )

    canvas.create_text(
        265.0,
        260.0,
        anchor='center',
        text=(
            f'Latitude: {info["latitude"]} | '
            f'Longitude: {info["longitude"]} | '
            f'Fuso: {info["fuso_horario"]}'
        ),
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 20 * -1),
        tags=('info', 'h3'),
    )

    canvas.create_text(
        265.0,
        405.0,
        anchor='center',
        text=f'{info["descricao"]}',
        fill='#E3E3E3',
        font=('RobotoRoman Regular', 20 * -1),
        tags=('info', 'normal'),
    )

    canvas.create_text(
        161.0,
        436.0,
        anchor='nw',
        text=info['temperatura'],
        fill='#FFFFFF',
        font=('RobotoRoman Bold', 80 * -1),
        tags=('info', 'large'),
    )

    canvas.create_text(
        327.0,
        473.0,
        anchor='nw',
        text='°C',
        fill='#FFFFFF',
        font=('RobotoRoman Bold', 40 * -1),
        tags=('info',),
    )

    canvas.create_text(
        50.0,
        357.0,
        anchor='nw',
        text=f'{info["minima"]} °C',
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 20 * -1),
        tags=('info', 'normal'),
    )

    canvas.create_text(
        412.0,
        357.0,
        anchor='nw',
        text=f'{info["maxima"]} °C',
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 20 * -1),
        tags=('info', 'normal'),
    )

    canvas.create_text(
        50.0,
        585.0,
        anchor='nw',
        text=info['nascer_do_sol'],
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 20 * -1),
        tags=('info', 'normal'),
    )

    canvas.create_text(
        419.0,
        585.0,
        anchor='nw',
        text=info['por_do_sol'],
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 20 * -1),
        tags=('info', 'normal'),
    )

    canvas.create_text(
        265.0,
        675.0,
        anchor='center',
        text=f'Vento: {info["vento"]} km/h - {info["direcao_vento"]}',
        fill='#E3E3E3',
        font=('RobotoRoman Bold', 20 * -1),
        tags=('info', 'normal'),
    )


window.resizable(False, False)
window.mainloop()
